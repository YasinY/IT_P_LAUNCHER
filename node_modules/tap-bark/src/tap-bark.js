"use strict";
var stream_1 = require("./stream/stream");
var output_1 = require("./output/output");
var output_provider_1 = require("./output-provider/output-provider");
var parser = require("tap-parser");
var duplexer = require("duplexer");
var TapBark = (function () {
    function TapBark(output, parser) {
        this._planEnd = 0;
        this.FIXTURE_REGEXP = /# FIXTURE (.*)/g;
        this.getPassCount = function (results) { return (results.pass || 0); };
        this.getFailCount = function (results) { return (results.fail || (results.failures || []).length); };
        this.getIgnoreCount = function (results) { return (results.skip || 0) + (results.todo || 0); };
        this.output = output;
        this.parser = parser;
        this.setupListeners();
        this.output.setup();
    }
    TapBark.create = function () {
        var stream = new stream_1.Stream();
        var input = parser();
        var outputProvider = new output_provider_1.OutputProvider();
        var output = new output_1.Output(stream, outputProvider);
        return new TapBark(output, input);
    };
    TapBark.prototype.getPipeable = function () {
        return duplexer(this.parser, this.output.getStream().getUnderlyingStream());
    };
    TapBark.prototype.setupListeners = function () {
        var _this = this;
        this.parser.on("plan", function (plan) {
            _this._planEnd = plan.end;
        });
        this.parser.on("comment", function (comment) {
            var fixtureParse = _this.FIXTURE_REGEXP.exec(comment);
            if (fixtureParse !== null) {
                _this.output.setFixtureName(fixtureParse[1]);
            }
        });
        this.parser.on("assert", function (assertion) {
            _this.output.setTestName(assertion.name);
            _this.output.setProgress(assertion.id, _this._planEnd);
        });
        this.parser.on("complete", function (results) {
            var _results = {
                pass: _this.getPassCount(results),
                fail: _this.getFailCount(results),
                ignore: _this.getIgnoreCount(results),
                failures: results.failures || []
            };
            _this.output.outputResults(_results);
            if (results.ok) {
                process.exit(0);
            }
            else {
                process.exit(1);
            }
        });
    };
    return TapBark;
}());
exports.TapBark = TapBark;
