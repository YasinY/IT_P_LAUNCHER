"use strict";
var result_type_1 = require("../result-type");
var Output = (function () {
    function Output(stream, outputProvider) {
        this._stream = stream;
        this._outputProvider = outputProvider;
    }
    Output.prototype.setup = function () {
        this._stream.writeLine("");
        this._stream.writeLine("");
    };
    Output.prototype.setFixtureName = function (name) {
        this._stream.moveCursor(0, -3);
        this._stream.clearLine();
        this._stream.write(name);
        this._stream.moveCursor(0, 3);
        this._stream.cursorTo(0, undefined);
    };
    Output.prototype.setTestName = function (name) {
        this._stream.moveCursor(0, -2);
        this._stream.clearLine();
        this._stream.write(name);
        this._stream.moveCursor(0, 2);
        this._stream.cursorTo(0, undefined);
    };
    Output.prototype.setProgress = function (current, total) {
        this._stream.moveCursor(0, -1);
        this._stream.clearLine();
        var progressBar = "";
        var progressResolution = 20;
        var progressGap = Math.round(current / total * progressResolution);
        while (progressBar.length < progressGap) {
            progressBar += "=";
        }
        while (progressBar.length < progressResolution) {
            progressBar += " ";
        }
        this._stream.write("|" + progressBar + "|");
        this._stream.moveCursor(0, 1);
        this._stream.cursorTo(0, undefined);
    };
    Output.prototype.outputResults = function (results) {
        var _this = this;
        var total = results.pass + results.fail + results.ignore;
        this._stream.writeLine("");
        this._stream.writeLine(this._outputProvider.getResultMessage(result_type_1.ResultType.PASS, results.pass, total));
        this._stream.writeLine(this._outputProvider.getResultMessage(result_type_1.ResultType.FAIL, results.fail, total));
        this._stream.writeLine(this._outputProvider.getResultMessage(result_type_1.ResultType.IGNORE, results.ignore, total));
        if (results.failures) {
            results.failures.forEach(function (f) {
                _this._stream.writeLine("");
                _this._stream.writeLine(_this._outputProvider.getFailureMessage(f));
            });
        }
    };
    Output.prototype.getStream = function () {
        return this._stream;
    };
    return Output;
}());
exports.Output = Output;
