"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const match_error_1 = require("./match-error");
class ErrorMatchError extends match_error_1.MatchError {
    constructor(actualError, shouldMatch, expectedErrorType, expectedErrorMessage) {
        super();
        this._setErrorMessage(actualError, shouldMatch, expectedErrorType, expectedErrorMessage);
        this._actual =
            `${actualError
                ? actualError.constructor.name + " "
                : ""}` +
                `error was ${!actualError ? "not " : ""}thrown` +
                `${actualError ? ' with message "' + actualError.message + '"' : ""}.`;
        this._expected =
            `${expectedErrorType
                ? expectedErrorType.name + " "
                : ""}` +
                `error ${!shouldMatch ? "not " : ""}to be thrown` +
                `${expectedErrorMessage
                    ? ' with message "' + expectedErrorMessage + '"'
                    : ""}.`;
    }
    _setErrorMessage(actualError, shouldMatch, expectedErrorType, expectedErrorMessage) {
        if (expectedErrorType || expectedErrorMessage) {
            this._setWrongSpecificErrorMessage(actualError, shouldMatch, expectedErrorType, expectedErrorMessage);
        }
        else {
            if (shouldMatch) {
                this.message = `Expected an error to be thrown but no errors were thrown.`;
            }
            else {
                this.message = `Expected an error not to be thrown but an error was thrown.`;
            }
        }
    }
    _setWrongSpecificErrorMessage(actualError, shouldMatch, expectedErrorType, expectedErrorMessage) {
        if (!expectedErrorType ||
            (expectedErrorMessage &&
                actualError instanceof expectedErrorType &&
                expectedErrorMessage !== actualError.message)) {
            this._setWrongMessageMessage(shouldMatch, expectedErrorMessage);
        }
        else if (expectedErrorMessage === undefined ||
            (actualError &&
                expectedErrorMessage === actualError.message &&
                !(actualError instanceof expectedErrorType))) {
            this._setWrongTypeMessage(actualError, shouldMatch, expectedErrorType);
        }
        else {
            this._setWrongMessageAndTypeMessage(shouldMatch, expectedErrorType, expectedErrorMessage);
        }
    }
    _setWrongMessageMessage(shouldMatch, expectedErrorMessage) {
        this.message =
            `Expected an error with message "${expectedErrorMessage}" ` +
                `to ${!shouldMatch ? "not " : ""}have been thrown, ` +
                `but it was${!shouldMatch ? "" : "n't"}.`;
    }
    _setWrongMessageAndTypeMessage(shouldMatch, expectedErrorType, expectedErrorMessage) {
        this.message =
            `Expected an error with message "${expectedErrorMessage}" ` +
                `and type ${expectedErrorType.name} to ${!shouldMatch ? "not " : ""}` +
                `have been thrown, but it was${!shouldMatch ? "" : "n't"}.`;
    }
    _setWrongTypeMessage(actualError, shouldMatch, expectedErrorType) {
        this.message =
            `Expected an error of type ${expectedErrorType.name} ` +
                `to ${!shouldMatch ? "not " : ""}have been thrown, ` +
                `but ${shouldMatch
                    ? actualError.name + " was thrown instead"
                    : "it was"}.`;
    }
}
exports.ErrorMatchError = ErrorMatchError;
//# sourceMappingURL=error-match-error.js.map