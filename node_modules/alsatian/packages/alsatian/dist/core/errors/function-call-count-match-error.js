"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const matchers_1 = require("../matchers");
const stringification_1 = require("../stringification");
const match_error_1 = require("./match-error");
class FunctionCallCountMatchError extends match_error_1.MatchError {
    static _bulidMessage(shouldMatch, expectedCallCount, countType, args) {
        return (`Expected function ${!shouldMatch ? "not " : ""}to be called` +
            `${args ? " with " + stringification_1.stringify(args) : ""}` +
            `${countType === matchers_1.SpyCallCountType.GreaterThan
                ? " greater than"
                : ""}` +
            `${countType === matchers_1.SpyCallCountType.LessThan ? " less than" : ""} ${expectedCallCount} time` +
            `${expectedCallCount === 1 ? "" : "s"}.`);
    }
    static _buildExpectedValue(shouldMatch, expectedCallCount, countType, args) {
        return (`function ${!shouldMatch ? "not " : ""}to be called` +
            `${args ? " with " + stringification_1.stringify(args) : ""}` +
            `${countType === matchers_1.SpyCallCountType.GreaterThan
                ? " greater than"
                : ""}` +
            `${countType === matchers_1.SpyCallCountType.LessThan ? " less than" : ""} ` +
            `${expectedCallCount} time${expectedCallCount === 1 ? "" : "s"}.`);
    }
    static _buildActualValue(actualValue, args) {
        return (`function was called` +
            `${args && actualValue.calls.length
                ? " with " +
                    actualValue.calls
                        .map(call => stringification_1.stringify(call.args))
                        .join(", ")
                : ""} ` +
            `${actualValue.calls.length} time${actualValue.calls.length === 1 ? "" : "s"}.`);
    }
    constructor(actualValue, shouldMatch, expectedCallCount, countType, args) {
        super(FunctionCallCountMatchError._bulidMessage(shouldMatch, expectedCallCount, countType, args), FunctionCallCountMatchError._buildExpectedValue(shouldMatch, expectedCallCount, countType, args), FunctionCallCountMatchError._buildActualValue(actualValue, args));
    }
}
exports.FunctionCallCountMatchError = FunctionCallCountMatchError;
//# sourceMappingURL=function-call-count-match-error.js.map