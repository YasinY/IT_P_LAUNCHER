"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const _1 = require("./");
class FunctionSpyMatcher {
    constructor(spy, expectedArguments) {
        this._expectedArguments = null;
        if (spy === null || spy === undefined) {
            throw new TypeError("spy must not be null or undefined.");
        }
        if (expectedArguments) {
            this._expectedArguments = expectedArguments;
        }
        this._spy = spy;
    }
    exactly(expectedCallCount) {
        return this._match(count => count !== expectedCallCount, expectedCallCount, "expectedCallCount", _1.SpyCallCountType.Exactly, true);
    }
    anythingBut(unexpectedCallCount) {
        return this._match(count => count === unexpectedCallCount, unexpectedCallCount, "unexpectedCallCount", _1.SpyCallCountType.Exactly, false);
    }
    greaterThan(minimumCallCount) {
        return this._match(count => count <= minimumCallCount, minimumCallCount, "minimumCallCount", _1.SpyCallCountType.GreaterThan, true);
    }
    lessThan(maximumCallCount) {
        return this._match(count => count >= maximumCallCount, maximumCallCount, "maximumCallCount", _1.SpyCallCountType.LessThan, true);
    }
    _validateCallCount(callCount, callCountName) {
        if (callCount < 1) {
            throw new TypeError(`${callCountName} must be greater than 0.`);
        }
    }
    _matchingCallsCount() {
        if (this._expectedArguments === null) {
            return this._spy.calls.length;
        }
        return this._matchingArguments();
    }
    _matchingArguments() {
        return this._spy.callsWithArguments.apply(this._spy, this._expectedArguments).length;
    }
    _match(countIsNotCorrect, callCount, callCountName, callCountType, shouldMatch) {
        this._validateCallCount(callCount, callCountName);
        if (countIsNotCorrect(this._matchingCallsCount())) {
            throw new errors_1.FunctionCallCountMatchError(this._spy, shouldMatch, callCount, callCountType, this._expectedArguments);
        }
        return new _1.FunctionSpyCallCountMatcher();
    }
}
exports.FunctionSpyMatcher = FunctionSpyMatcher;
//# sourceMappingURL=function-spy-matcher.js.map