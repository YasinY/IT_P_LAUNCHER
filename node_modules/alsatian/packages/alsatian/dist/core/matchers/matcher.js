"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const spying_1 = require("../spying");
const stringification_1 = require("../stringification");
const diff_1 = require("./diff");
class Matcher {
    constructor(actualValue) {
        this._shouldMatch = true;
        this._actualValue = actualValue;
    }
    get actualValue() {
        return this._actualValue;
    }
    get shouldMatch() {
        return this._shouldMatch;
    }
    get not() {
        this._shouldMatch = !this.shouldMatch;
        return this;
    }
    toBe(expectedValue) {
        this._registerMatcher((expectedValue === this._actualValue) === this.shouldMatch, `Expected ${stringification_1.stringify(this.actualValue)} ${!this.shouldMatch ? "not " : ""}` + `to be ${stringification_1.stringify(expectedValue)}.`, expectedValue);
    }
    toEqual(expectedValue) {
        let valueMatch;
        if (expectedValue instanceof spying_1.TypeMatcher) {
            valueMatch = expectedValue.test(this._actualValue);
        }
        else if (Buffer.isBuffer(expectedValue)) {
            valueMatch = this._checkBuffersAreEqual(expectedValue, this._actualValue);
        }
        else if (expectedValue instanceof Object) {
            valueMatch = this._checkObjectsAreDeepEqual(expectedValue, this._actualValue);
        }
        else {
            valueMatch = expectedValue == this._actualValue;
        }
        this._registerMatcher(valueMatch === this._shouldMatch, `Expected values ${!this.shouldMatch ? "not " : ""}to be equal`, expectedValue, {
            diff: diff_1.diff(expectedValue, this._actualValue)
        });
    }
    toBeDefined() {
        this._registerMatcher((this._actualValue !== undefined) === this.shouldMatch, `Expected ${stringification_1.stringify(this.actualValue)} ${this.shouldMatch ? "not " : ""}` + `to be undefined.`, undefined);
    }
    toBeNull() {
        this._registerMatcher((this._actualValue === null) === this.shouldMatch, `Expected ${stringification_1.stringify(this.actualValue)} ${!this.shouldMatch ? "not " : ""}` + `to be null.`, null);
    }
    toBeTruthy() {
        this._registerMatcher((this._actualValue && this.shouldMatch) ||
            (!this._actualValue && !this.shouldMatch), `Expected ${stringification_1.stringify(this.actualValue)} ${!this.shouldMatch ? "not " : ""}to be truthy.`, this.shouldMatch ? "truthy" : "falsy");
    }
    _registerMatcher(isMatch, failureMessage, expectedValue, extras) {
        if (isMatch === false) {
            throw new errors_1.MatchError(failureMessage, expectedValue, this._actualValue, extras);
        }
    }
    _checkBuffersAreEqual(buffer, other) {
        if (this._isBufferable(other)) {
            const otherBuffer = Buffer.isBuffer(other)
                ? other
                : Buffer.from(other);
            return buffer.equals(otherBuffer);
        }
        else {
            return false;
        }
    }
    _checkObjectsAreDeepEqual(objectA, objectB) {
        if (Array.isArray(objectA) !== Array.isArray(objectB)) {
            return false;
        }
        const OBJECT_A_KEYS = Object.keys(objectA);
        const OBJECT_B_KEYS = Object.keys(objectB);
        if (OBJECT_A_KEYS.length !== OBJECT_B_KEYS.length) {
            return false;
        }
        for (const objectAKey of OBJECT_A_KEYS) {
            if (objectA[objectAKey] !== objectB[objectAKey]) {
                if (typeof objectA[objectAKey] !== "object" ||
                    this._checkObjectsAreDeepEqual(objectA[objectAKey], objectB[objectAKey]) === false) {
                    return false;
                }
            }
        }
        return true;
    }
    _isBufferable(obj) {
        return ("string" === typeof obj ||
            Buffer.isBuffer(obj) ||
            Array.isArray(obj) ||
            obj instanceof ArrayBuffer ||
            (null != obj &&
                "object" === typeof obj &&
                obj.hasOwnProperty("length") &&
                "number" === typeof obj.length &&
                (obj.length === 0 || (obj.length > 0 && obj.length - 1 in obj))));
    }
}
exports.Matcher = Matcher;
//# sourceMappingURL=matcher.js.map