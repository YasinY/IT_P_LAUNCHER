"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const spying_1 = require("../spying");
const _1 = require("./");
const matcher_1 = require("./matcher");
class FunctionMatcher extends matcher_1.Matcher {
    toThrow() {
        const error = this._getError();
        if ((error === null) === this.shouldMatch) {
            throw new errors_1.ErrorMatchError(error, this.shouldMatch);
        }
    }
    toThrowAsync() {
        return __awaiter(this, void 0, void 0, function* () {
            const error = yield this._getAsyncError();
            if ((error === null) === this.shouldMatch) {
                throw new errors_1.ErrorMatchError(error, this.shouldMatch);
            }
        });
    }
    toThrowError(errorType, errorMessage) {
        const error = this._getError();
        const threwRightError = this._errorMatches(error, errorType, errorMessage);
        if (threwRightError !== this.shouldMatch) {
            throw new errors_1.ErrorMatchError(error, this.shouldMatch, errorType, errorMessage);
        }
    }
    toThrowErrorAsync(errorType, errorMessage) {
        return __awaiter(this, void 0, void 0, function* () {
            const error = yield this._getAsyncError();
            const threwRightError = this._errorMatches(error, errorType, errorMessage);
            if (threwRightError !== this.shouldMatch) {
                throw new errors_1.ErrorMatchError(error, this.shouldMatch, errorType, errorMessage);
            }
        });
    }
    toHaveBeenCalled() {
        if (this._isFunctionSpyOrSpiedOnFunction(this.actualValue) === false) {
            throw new TypeError("toHaveBeenCalled requires value passed in to Expect to be a FunctionSpy or a spied on function.");
        }
        if ((this.actualValue.calls.length === 0) === this.shouldMatch) {
            throw new errors_1.FunctionCallMatchError(this.actualValue, this.shouldMatch);
        }
        return new _1.FunctionSpyMatcher(this.actualValue);
    }
    toHaveBeenCalledWith(...expectedArguments) {
        if (this._isFunctionSpyOrSpiedOnFunction(this.actualValue) === false) {
            throw new TypeError("toHaveBeenCalledWith requires value passed in to Expect to be a FunctionSpy or a spied on function.");
        }
        if (this.actualValue.calls.some((call) => this._callArgumentsMatch(call, expectedArguments)) !== this.shouldMatch) {
            throw new errors_1.FunctionCallMatchError(this.actualValue, this.shouldMatch, expectedArguments);
        }
        return new _1.FunctionSpyMatcher(this.actualValue, expectedArguments);
    }
    _getError() {
        try {
            this.actualValue();
            return null;
        }
        catch (error) {
            return error;
        }
    }
    _getAsyncError() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.actualValue();
                return null;
            }
            catch (error) {
                return error;
            }
        });
    }
    _errorMatches(error, errorType, errorMessage) {
        return error instanceof errorType && error.message === errorMessage;
    }
    _callArgumentsMatch(call, expectedArguments) {
        if (call.args.length !== expectedArguments.length) {
            return false;
        }
        return call.args.every((arg, index) => {
            const expectedArgument = expectedArguments[index];
            return (arg === expectedArgument ||
                expectedArgument === spying_1.Any ||
                (expectedArgument instanceof spying_1.TypeMatcher &&
                    expectedArgument.test(arg)));
        });
    }
    _isFunctionSpyOrSpiedOnFunction(value) {
        return (value instanceof spying_1.FunctionSpy ||
            (value instanceof Function && value.calls !== undefined));
    }
}
exports.FunctionMatcher = FunctionMatcher;
//# sourceMappingURL=function-matcher.js.map