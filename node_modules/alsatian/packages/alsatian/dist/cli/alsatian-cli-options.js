"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const duplicate_cli_argument_error_1 = require("./errors/duplicate-cli-argument-error");
const invalid_argument_names_error_1 = require("./errors/invalid-argument-names-error");
const invalid_timeout_value_error_1 = require("./errors/invalid-timeout-value-error");
const missing_argument_value_error_1 = require("./errors/missing-argument-value-error");
const unused_1 = require("../core/unused");
const remove_item_by_index_1 = require("../core/utils/remove-item-by-index");
class AlsatianCliOptions {
    constructor(args) {
        this._timeout = null;
        this._tap = false;
        this._versionRequested = false;
        this._helpRequested = false;
        this._hideProgress = false;
        args = this._extractTap(args);
        args = this._extractVersionRequested(args);
        args = this._extractHelpRequested(args);
        args = this._extractFileGlobs(args);
        args = this._extractTimeout(args);
        args = this._extractHideProgress(args);
        if (args.length > 0) {
            throw new invalid_argument_names_error_1.InvalidArgumentNamesError(args);
        }
    }
    get fileGlobs() {
        return this._fileGlobs;
    }
    get timeout() {
        return this._timeout;
    }
    get tap() {
        return this._tap;
    }
    get versionRequested() {
        return this._versionRequested;
    }
    get helpRequested() {
        return this._helpRequested;
    }
    get hideProgress() {
        return this._hideProgress;
    }
    _extractFileGlobs(args) {
        this._fileGlobs = args.filter((value, index) => {
            const previousArgument = args[index - 1];
            if ((!previousArgument || previousArgument[0]) !== "-" &&
                value[0] !== "-") {
                return true;
            }
            return false;
        });
        return args.filter(value => this._fileGlobs.indexOf(value) === -1);
    }
    _isInvalidTimeoutValue(timeoutValue) {
        const timeout = parseInt(timeoutValue, 10);
        return (isNaN(timeout) || timeout < 1 || timeout.toString() !== timeoutValue);
    }
    _extractTimeout(args) {
        const timeoutValue = this._getArgumentValueFromArgumentList(args, "timeout", "t");
        if (timeoutValue !== null) {
            if (this._isInvalidTimeoutValue(timeoutValue)) {
                throw new invalid_timeout_value_error_1.InvalidTimeoutValueError(timeoutValue);
            }
            const timeout = parseInt(timeoutValue, 10);
            this._timeout = timeout;
            const argumentIndex = this._getArgumentIndexFromArgumentList(args, "timeout", "t");
            return args.filter((value, index) => {
                unused_1.Unused(value);
                return index !== argumentIndex && index !== argumentIndex + 1;
            });
        }
        return args;
    }
    _extractTap(args) {
        const argumentIndex = this._getArgumentIndexFromArgumentList(args, "tap", "T");
        this._tap = argumentIndex !== -1;
        return args.filter((value, index) => {
            unused_1.Unused(value);
            return index !== argumentIndex;
        });
    }
    _extractHideProgress(args) {
        const argumentIndex = this._getArgumentIndexFromArgumentList(args, "hide-progress", "H");
        this._hideProgress = argumentIndex !== -1;
        return args.filter((value, index) => {
            unused_1.Unused(value);
            return index !== argumentIndex;
        });
    }
    _extractVersionRequested(args) {
        const versionRequestedIndex = this._getArgumentIndexFromArgumentList(args, "version", "v");
        if (versionRequestedIndex > -1) {
            this._versionRequested = true;
            return remove_item_by_index_1.removeItemByIndex(args, versionRequestedIndex);
        }
        return args;
    }
    _extractHelpRequested(args) {
        const helpRequestedIndex = this._getArgumentIndexFromArgumentList(args, "help", "h");
        if (helpRequestedIndex > -1) {
            this._helpRequested = true;
            return remove_item_by_index_1.removeItemByIndex(args, helpRequestedIndex);
        }
        return args;
    }
    _getArgumentIndexFromArgumentList(args, argumentName, argumentShorthand) {
        const matchingArguments = args.filter(value => value === "--" + argumentName ||
            value === "-" + argumentShorthand);
        if (matchingArguments.length === 0) {
            return -1;
        }
        else if (matchingArguments.length > 1) {
            throw new duplicate_cli_argument_error_1.DuplicateCliArgumentError(argumentName);
        }
        return args.indexOf(matchingArguments[0]);
    }
    _getArgumentValueFromArgumentList(args, argumentName, argumentShorthand) {
        const argumentIndex = this._getArgumentIndexFromArgumentList(args, argumentName, argumentShorthand);
        if (argumentIndex === -1) {
            return null;
        }
        const valueArgument = args[argumentIndex + 1];
        if (valueArgument &&
            (valueArgument[0] !== "-" || !isNaN(parseInt(valueArgument, 10)))) {
            return valueArgument;
        }
        else {
            throw new missing_argument_value_error_1.MissingArgumentValueError(argumentName);
        }
    }
}
exports.AlsatianCliOptions = AlsatianCliOptions;
//# sourceMappingURL=alsatian-cli-options.js.map