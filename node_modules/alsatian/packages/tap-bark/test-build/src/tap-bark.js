"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const through = require("through2");
const parser = require("tap-parser");
const duplexer = require("duplexer");
const { h, render, Component, Color, Indent } = require("ink");
exports.Component = Component;
const TAP_PARSER = parser();
class TapBarkOutput extends Component {
    constructor(props) {
        super(props);
        this.FIXTURE_REGEXP = /^# FIXTURE (.*)/;
        this.CONSOLE_WARNING_REGEXP = /^# WARN: (.*)/;
        this._completeCalled = false;
        this.warnings = [];
        this.state = {
            logs: [],
            warnings: []
        };
        this.setupListeners();
    }
    getPipeable() {
        return duplexer(TAP_PARSER, through());
    }
    getFailureMessage(assertion) {
        const failureTitle = chalk_1.default.red("FAIL: ") + chalk_1.default.bold(assertion.name) + "\n";
        if (assertion.diag) {
            const data = assertion.diag.data;
            const details = data.details;
            const title = `${failureTitle} ${assertion.diag.message}\n`;
            if (details && Object.keys(details).length > 0) {
                return `${title}${Object.keys(details)
                    .map(key => `\n${chalk_1.default.underline(key)}:\n${details[key]}`)
                    .join("\n")}`;
            }
            return `${title}\nexpected:\n${data.expect}\nactual:\n${data.got}`;
        }
        return failureTitle + "Failure reason unknown.";
    }
    render() {
        const results = this.state.results;
        const total = this.state.totalTests;
        if (this.state.results) {
            return h(Indent, null,
                this.state.warnings.join("\n"),
                h(Color, { green: true },
                    "Pass: ",
                    results.pass,
                    " / ",
                    total,
                    "\n"),
                h(Color, { red: true },
                    "Fail: ",
                    results.fail,
                    " / ",
                    total,
                    "\n"),
                h(Color, { yellow: true },
                    "Ignore: ",
                    results.ignore,
                    " / ",
                    total,
                    "\n",
                    "\n"),
                results.failures.map(this.getFailureMessage.bind(this)).join("\n"));
        }
        if (this.props.showProgress === false) {
            return h(Indent, null, "running alsatian tests");
        }
        return h(Indent, null,
            Math.floor(this.state.currentTest / total * 100 || 0),
            "% complete");
    }
    handleNewPlan(plan) {
        this.setState({
            totalTests: plan.end
        });
    }
    handleComment(comment) {
        let fixtureParse = this.FIXTURE_REGEXP.exec(comment);
        if (fixtureParse !== null) {
            this.setState({
                fixtureName: fixtureParse[1]
            });
        }
        else {
            const message = comment.replace("# ", "");
            if (this.CONSOLE_WARNING_REGEXP.test(comment)) {
                this.warnings.push(chalk_1.default.yellow(message));
                this.setState({
                    warnings: this.warnings
                });
            }
        }
    }
    handleAssert(assertion) {
        this.setState({
            currentTest: assertion.id,
            testName: assertion.name
        });
    }
    handleComplete(results) {
        let _results = {
            pass: results.pass || 0,
            fail: (results.fail || (results.failures || []).length),
            ignore: (results.skip || 0) + (results.todo || 0),
            failures: results.failures || []
        };
        if (this._completeCalled === false) {
            this._completeCalled = true;
            this.setState(Object.assign({}, this.state, { results: _results }), setTimeout(() => {
                if (results.ok) {
                    process.exit(0);
                }
                else {
                    process.exit(1);
                }
            }, 100));
        }
    }
    setupListeners() {
        if (this.props.showProgress) {
            TAP_PARSER.on("comment", this.handleComment.bind(this));
            TAP_PARSER.on("assert", this.handleAssert.bind(this));
        }
        TAP_PARSER.on("plan", this.handleNewPlan.bind(this));
        TAP_PARSER.on("complete", this.handleComplete.bind(this));
    }
}
exports.TapBarkOutput = TapBarkOutput;
class TapBark {
    static create(showProgress = true) {
        const tapBarkOutput = h(TapBarkOutput, { showProgress: showProgress });
        render(tapBarkOutput);
        return tapBarkOutput.instance;
    }
}
TapBark.tapParser = TAP_PARSER;
exports.TapBark = TapBark;
//# sourceMappingURL=tap-bark.js.map